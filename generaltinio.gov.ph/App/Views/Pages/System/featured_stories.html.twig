{% extends '@pages/System/base.html.twig' %}

{% block title %}Creating Featured Stories{% endblock title %}
{% block styles %}
  {{ parent() }}
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
  {% include('@components/Common/markdown.style.twig') %}
{% endblock styles %}
{% block right_content %}
  <div class="flex flex-col p-10">
    <h1 class="text-center text-4xl">Module: Featured Stories</h1>
    <hr class="my-5">
    {{ include('@components/System/featured_stories-table.html.twig', { 'featured_stories' : featured_stories }) }}
    <hr class="my-5">
    {{ include('@components/System/featured_stories-form.html.twig') }}
  </div>
{% endblock right_content %}
{% block scripts %}
  {{ parent() }}
  <script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
  <script>
    var simpleMDE = new SimpleMDE({ 
      element: document.getElementById("content"), 
      forceSync: true,
      spellChecker: false,
    });

    document.addEventListener('DOMContentLoaded', function () {
      try {
        let table = new DataTable('#featured_stories-table', {
          "columnDefs": [
            { "width": "3%", "targets": 0 },
            { "width": "10%", "targets": 3 },
            { "width": "10%", "targets": 4 },
            { "width": "10%", "targets": 5 },
          ]
        });
      } catch(e) {}
    });

    file.onchange = (e) => {
      if (e.target.files && e.target.files[0]) {
        image.src = URL.createObjectURL(e.target.files[0]);
      }
    }

    FeaturedStoriesForm.onsubmit = async (e) => {
      e.preventDefault();

      let processingModal = Swal.fire({ 
        imageUrl: '/assets/img/loading.gif',
        title: 'Processing...',
        allowOutsideClick: false, 
        allowEscapeKey: false,          
        showConfirmButton: false
      });
      let hiddenIdInput = FeaturedStoriesForm.querySelector('#id');
      let response = await fetch('/system/featured_stories' + ((hiddenIdInput) ? ('/' + hiddenIdInput.value + '/update') : ''), {
        credentials: "same-origin",
        method: 'POST',
        body: new FormData(FeaturedStoriesForm)
      });
      let {
        message,
        status
      } = await response.json();

      processingModal.close();
      if (status == 'success') {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: message,
          showConfirmButton: false,
          timer: 1500
        }).then(() => window.location.reload());
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: message
        });
      }
    }

    function editFeaturedStory(data) {
      let { id, image, date, title, subtitle, content, category, visible } = data;
      let hiddenIdInput = FeaturedStoriesForm.querySelector('#id');
      let oldImageInput = FeaturedStoriesForm.querySelector('#old_image');

      if(hiddenIdInput) {
        hiddenIdInput.value = id;
        oldImageInput.value = image;
      } else {
        let idInput = document.createElement('input');

        idInput.setAttribute('type', 'hidden');
        idInput.setAttribute('id', 'id');
        idInput.setAttribute('name', 'id');
        idInput.value = id;
        FeaturedStoriesForm.prepend(idInput);

        let oldImageInput = document.createElement('input');

        oldImageInput.setAttribute('type', 'hidden');
        oldImageInput.setAttribute('id', 'old_image');
        oldImageInput.setAttribute('name', 'old_image');
        oldImageInput.value = image;
        FeaturedStoriesForm.prepend(oldImageInput);
      }

      if(image) {
        FeaturedStoriesForm.querySelector('#image').setAttribute('src', '/uploads/featured_stories/' + image);
      } else {
        FeaturedStoriesForm.querySelector('#image').setAttribute('src', '/assets/img/default.jpg');
      }

      FeaturedStoriesForm.querySelector('#title').value = title;
      FeaturedStoriesForm.querySelector('#subtitle').value = subtitle;
      simpleMDE.value(content);
      FeaturedStoriesForm.querySelector('#category').value = category;
      FeaturedStoriesForm.querySelector('#visible').value = visible;
      FeaturedStoriesForm.querySelector('#date').value = date;

      FeaturedStoriesForm.querySelector('#save-button').style.display = "none";
      FeaturedStoriesForm.querySelector('#update-buttons').style.display = "inline-block";
    }

    function cancelEdit() {
      let hiddenIdInput = FeaturedStoriesForm.querySelector('#id');
        hiddenIdInput.remove();
      let hiddenOldImageInput = FeaturedStoriesForm.querySelector('#old_image');
        hiddenOldImageInput.remove();
      let fileInput = FeaturedStoriesForm.querySelector('#file');
      let newFileInput = document.createElement('input');

      newFileInput.setAttribute('type', 'file');
      newFileInput.setAttribute('id', 'file');
      newFileInput.setAttribute('name', 'file');
      newFileInput.setAttribute('accept', 'image/*');

      fileInput.replaceWith(newFileInput);
      document.querySelector('#file').onchange = (e) => {
        if (e.target.files && e.target.files[0]) {
          image.src = URL.createObjectURL(e.target.files[0]);
        }
      }
      
      FeaturedStoriesForm.querySelector('#title').value = "";
      FeaturedStoriesForm.querySelector('#subtitle').value = "";
      simpleMDE.value("");
      FeaturedStoriesForm.querySelector('#category').value = "";
      FeaturedStoriesForm.querySelector('#visible').value = "";
      FeaturedStoriesForm.querySelector('#date').value = "0000-00-00";
      FeaturedStoriesForm.querySelector('#image').setAttribute('src', '/assets/img/default.jpg');

      FeaturedStoriesForm.querySelector('#save-button').style.display = "inline-block";
      FeaturedStoriesForm.querySelector('#update-buttons').style.display = "none";
    }

    async function deleteFeaturedStory(id) {
      let result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      });

      if(result.isConfirmed) {
        let processingModal = Swal.fire({ 
          imageUrl: '/assets/img/loading.gif',
          title: 'Processing...',
          allowOutsideClick: false, 
          allowEscapeKey: false,          
          showConfirmButton: false
        });

        let response = await fetch('/system/featured_stories/' + id, {
          credentials: "same-origin",
          method: 'DELETE',
        });
        let {
          message,
          status
        } = await response.json();

        processingModal.close();

        if (status == 'success') {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            showConfirmButton: false,
            timer: 1500
          }).then(() => window.location.reload()); 
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: message
          });
        }
      }
    }

    async function announceFeaturedStory(data) {
      let { id, title } = data;
      let result = await Swal.fire({
        title: 'Announce this content?',
        icon: 'info',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, announce it!'
      });

      if(result.isConfirmed) {
        let formData = new FormData();
          formData.append('type', 'featured_story');
          formData.append('title', title);
          formData.append('data_id', id);

        let response = await fetch('/system/announcements', {
          credentials: "same-origin",
          method: 'POST',
          body: formData
        });
        let {
          message,
          status
        } = await response.json();

        if (status == 'success') {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            showConfirmButton: false,
            timer: 1500
          }).then(() => window.location.reload()); 
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: message
          });
        }
      }
    }
  </script>
{% endblock scripts %}