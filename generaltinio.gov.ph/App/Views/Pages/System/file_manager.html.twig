{% extends '@pages/System/base.html.twig' %}

{% block title %}SYSTEM_MODULE: {{ current_page|title }} - General Tinio, Nueva Ecija | The Official Website{% endblock title %}
{% block styles %}
  {{ parent() }}
{% endblock styles %}
{% block right_content %}
  <div class="flex flex-col p-10">
    <h1 class="text-center text-4xl">Module: File Manager</h1>
    <hr class="my-5">
    {{ include('@components/System/file_manager-table.html.twig', { 'files' : files }) }}
    <hr class="my-5">
    {{ include('@components/System/file_manager-form.html.twig') }}
  </div>
{% endblock right_content %}
{% block scripts %}
  {{ parent() }}
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      try {
        let table = new DataTable('#file_manager-table', {
          "columnDefs": [
            { "width": "3%", "targets": 0 },
            { "width": "15%", "targets": 2 },
            { "width": "10%", "targets": 3 },
            { "width": "10%", "targets": 4 },
          ]
        });
      } catch(e) {}
    });

    file.onchange = (e) => {
      if (e.target.files && e.target.files[0]) {
        image.src = URL.createObjectURL(e.target.files[0]);
      }
    }

    FileManagerForm.onsubmit = async (e) => {
      e.preventDefault();

      let oldNameInput  = FileManagerForm.querySelector('#old_name');
      let fileNameInput = FileManagerForm.querySelector('#file_name');
      let processingModal = Swal.fire({ 
        imageUrl: '/assets/img/loading.gif',
        title: 'Processing...',
        allowOutsideClick: false, 
        allowEscapeKey: false,          
        showConfirmButton: false
      });

      let response = await fetch('/system/file_manager' + ((oldNameInput) ? ('/' + oldNameInput.value + '/update') : ''), {
        credentials: "same-origin",
        method: 'POST',
        body: new FormData(FileManagerForm)
      });
      let {
        message,
        status
      } = await response.json();

      processingModal.close();
      if (status == 'success') {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: message,
          showConfirmButton: false,
          timer: 1500
        }).then(() => window.location.reload());
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: message
        });
      }
    }

    function copyToClipboard(textToCopy) {
      if (navigator.clipboard && window.isSecureContext) {
          return navigator.clipboard.writeText(textToCopy);
      } else {
          let textArea = document.createElement("textarea");
          textArea.value = textToCopy;
          textArea.style.position = "fixed";
          textArea.style.left = "-999999px";
          textArea.style.top = "-999999px";
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();
          return new Promise((resolve, reject) => {
              document.execCommand('copy') ? resolve() : reject();
              textArea.remove();
          });
      }
    }

    async function copyLink(file) {
      console.log(file);
      const filePath = '/uploads/files/user_' + file.author.id + '/';

      copyToClipboard(filePath + encodeURI(file.name)).then(() => {
        Swal.fire({
          text: 'Link copied!',
          showConfirmButton: false,
          backdrop: false,
          width: '200px',
          background: '#555',
          color: '#fff',
          position: 'bottom-end',
          timer: 1500
        })
      });
    } 

    function editFile(data) {
      let { name } = data;
      let oldNameInput = FileManagerForm.querySelector('#old_name');

      if(oldNameInput) {
        oldNameInput.value = name;
      } else {
        let oldNameInput = document.createElement('input');

        oldNameInput.setAttribute('type', 'hidden');
        oldNameInput.setAttribute('id', 'old_name');
        oldNameInput.setAttribute('name', 'old_name');
        oldNameInput.value = name;
        FileManagerForm.prepend(oldNameInput);
      }

      if(name) {
        FileManagerForm.querySelector('#image').setAttribute('src', '/uploads/files/user_' + data.author.id + '/' + name);
      } else {
        FileManagerForm.querySelector('#image').setAttribute('src', '/assets/img/default.jpg');
      }

      let arr = name.split(".");
      arr.pop();
      let fileName = arr.join(".");
      FileManagerForm.querySelector('#file_name').value = fileName;
      FileManagerForm.querySelector('#file').setAttribute('disabled', true);

      FileManagerForm.querySelector('#save-button').style.display = "none";
      FileManagerForm.querySelector('#update-buttons').style.display = "inline-block";
    }

    function cancelEdit() {
      let oldNameInput = FileManagerForm.querySelector('#old_name');
        oldNameInput.remove();

      let fileInput = FileManagerForm.querySelector('#file');
      let newFileInput = document.createElement('input');

      newFileInput.setAttribute('type', 'file');
      newFileInput.setAttribute('id', 'file');
      newFileInput.setAttribute('name', 'file');
      newFileInput.setAttribute('accept', 'image/*, .pdf, .doc, .docx, .csv, .xls, .xlsx');

      fileInput.replaceWith(newFileInput);

      document.querySelector('#file').onchange = (e) => {
        if (e.target.files && e.target.files[0]) {
          image.src = URL.createObjectURL(e.target.files[0]);
        }
      }
      
      FileManagerForm.querySelector('#file_name').value = "";
      FileManagerForm.querySelector('#file').removeAttribute('disabled');
      FileManagerForm.querySelector('#image').setAttribute('src', '/assets/img/default.jpg');

      FileManagerForm.querySelector('#save-button').style.display = "inline-block";
      FileManagerForm.querySelector('#update-buttons').style.display = "none";
    }

    async function deleteFile(fileName) {
      let result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      });

      if(result.isConfirmed) {
        let response = await fetch('/system/file_manager/' + fileName, {
          credentials: "same-origin",
          method: 'DELETE',
        });
        let {
          message,
          status
        } = await response.json();

        if (status == 'success') {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            showConfirmButton: false,
            timer: 1500
          }).then(() => window.location.reload()); 
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: message
          });
        }
      }
    }
  </script>
{% endblock scripts %}