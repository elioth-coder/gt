{% extends '@pages/System/base.html.twig' %}

{% block title %}SYSTEM_MODULE: {{ current_page|title }} - General Tinio, Nueva Ecija | The Official Website{% endblock title %}
{% block styles %}
  {{ parent() }}
{% endblock styles %}
{% block right_content %}
  <div class="flex flex-col p-10">
    <h1 class="text-center text-4xl">Module: Photo Gallery</h1>
    <hr class="my-5">
    {{ include('@components/System/photo_gallery-table.html.twig', { 'directories' : directories }) }}
    <hr class="my-5">
    {{ include('@components/System/photo_gallery-form.html.twig') }}
  </div>
  {{ include('@components/System/photo_gallery-modal.html.twig') }}
{% endblock right_content %}
{% block scripts %}
  {{ parent() }}
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      try {
        let table = new DataTable('#photo_gallery-table', {
          "columnDefs": [
            { "width": "20%", "targets": 1 },
            { "width": "8%", "targets": 2 },
            { "width": "15%", "targets": 3 },
          ]
        });
      } catch(e) {}
    });

    const sleep = async (timeout) => {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve();
        }, timeout * 1000);
      });
    }

    async function uploadImage(e) {
      e.preventDefault();

      let form = e.target;
      $(form).find('button').hide();
      $(form).find('.loading-btn').show();        

      let response = await fetch('/system/photo_gallery/photo/upload', {
        credentials: "same-origin",
        method: 'POST',
        body: new FormData(form)
      });
      let {
        message,
        status,
        image,
      } = await response.json();

      if (status == 'success') {
        $(form).find('button').hide();
        $(form).find('.success-btn').show();  

        await sleep(2); 
        $(form).remove();   
        addImageToModal(image);
      } else {
        $(form).find('button').hide();
        $(form).find('.error-btn').show();   
        await sleep(3); 
        $(form).find('button').hide();
        $(form).find('.upload-btn').show();      
      }
    }

    async function deleteImage(e) {
      e.preventDefault();

      let form = e.target;
      $(form).find('button').hide();
      $(form).find('.loading-btn').show();        

      let response = await fetch('/system/photo_gallery/photo/delete', {
        credentials: "same-origin",
        method: 'POST',
        body: new FormData(form)
      });
      let {
        message,
        status,
        image,
      } = await response.json();

      if (status == 'success') {
        $(form).find('button').hide();
        $(form).find('.success-btn').show();  

        await sleep(2); 
        $(form).remove();   
      } else {
        $(form).find('button').hide();
        $(form).find('.error-btn').show();        
        await sleep(3); 
        $(form).find('button').hide();
        $(form).find('.delete-btn').show();      
      }
    }

    function addImageToModal(image) {
      const $el = document.getElementById('modal');
      let $container = $($el.querySelector('.images-container'));
      let content = `
        <form onsubmit="deleteImage(event);" 
          method="POST"
          class="image-deleter-form bg-black relative flex justify-center items-center float-left w-[150px] h-[150px] border">
          <input type="hidden" value="${image.directory}" name="directory" />
          <input type="hidden" value="${image.name}" name="image" />
          <img src="/uploads/photo_gallery/${encodeURI(image.directory)}/${image.name}" class="w-full block" />
          <button style="display:none;" title="Deleting..." class="loading-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="button">
            <img class="h-6 w-6" src="/assets/img/loading.gif" />
          </button>
          <button title="Delete photo." class="delete-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="submit">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>          
          </button>
          <button style="display:none;" title="Successfully deleted." class="success-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="button">
            <svg xmlns="http://www.w3.org/2000/svg" class="text-green-700 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
            </svg>          
          </button>
          <button style="display:none;" title="Failed to delete." class="error-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="button">
            <svg xmlns="http://www.w3.org/2000/svg" class="text-red-700 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>         
          </button>
        </form>
      `;

      $container.append(content);
    }

    function addPreviewImageToModal(data) {
      const $el = document.getElementById('modal');
      let directory = $el.getAttribute('data-directory');
      let $container = $($el.querySelector('.preview-images-container'));
      let content = `
        <form onsubmit="uploadImage(event);" 
          method="POST"
          class="image-uploader-form bg-black relative flex justify-center items-center float-left w-[150px] h-[150px] border">
          <input type="hidden" value="${directory}" name="directory" />
          <input type="hidden" value="${data}" name="image" />
          <img src="${data}" class="w-full block" />
          <button style="display:none;" title="Uploading..." class="loading-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="button">
            <img class="h-6 w-6" src="/assets/img/loading.gif" />
          </button>
          <button title="Upload photo." class="upload-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="submit">
            <svg xmlns="http://www.w3.org/2000/svg" class="text-blue-700h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
            </svg>
          </button>
          <button style="display:none;" title="Successfully uploaded." class="success-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="button">
            <svg xmlns="http://www.w3.org/2000/svg" class="text-green-700 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
            </svg>          
          </button>
          <button style="display:none;" title="Failed to upload." class="error-btn
            absolute text-gray-500 bg-white hover:bg-gray-100 
            focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-full 
            border border-gray-200 text-sm font-medium p-2.5 hover:text-gray-900 
            focus:z-10" 
            type="button">
            <svg xmlns="http://www.w3.org/2000/svg" class="text-red-700 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>         
          </button>
        </form>
      `;

      $container.append(content);
    }

    const showUploadPhotosButton = () => {
      const $el = document.getElementById('modal');

      $($el).find('.upload-all-btn').show();
    }

    const hideUploadPhotosButton = () => {
      const $el = document.getElementById('modal');

      $($el).find('.upload-all-btn').hide();
    }

    const onChoosePhotos = (e) => {
      let files = e.target.files

      if (files.length) {
        let processed = 0;
        for(let i=0; i<files.length; i++) {
          let reader = new FileReader();

          reader.addEventListener("load", function () {
            processed++;
            addPreviewImageToModal(reader.result);

            if(processed == files.length) {
              showUploadPhotosButton();
            }
          }, false);

          reader.readAsDataURL(files[i]);
        }
      }
    }

    file.onchange = onChoosePhotos;

    const uploadAllImages = () => {
      const $el = document.getElementById('modal');
      const $container = $el.querySelector('.modal-body .preview-images-container');
      const $uploadButtons = $container.querySelectorAll('form .upload-btn');

      $uploadButtons.forEach(button => {
        $(button).click();
      })

      console.log($uploadButtons);

      hideUploadPhotosButton();
    }

    async function showModal(directory) {
      const $el = document.getElementById('modal');
      const resetFileInput = () => {
        let fileInput = $el.querySelector('#file');
        let newFileInput = document.createElement('input');

        newFileInput.setAttribute('multiple', true);
        newFileInput.setAttribute('type', 'file');
        newFileInput.setAttribute('id', 'file');
        newFileInput.setAttribute('name', 'file');
        newFileInput.setAttribute('accept', 'image/*');
        newFileInput.setAttribute('class', 'inline-block');
        newFileInput.style = "width:calc(100% - 150px);"

        fileInput.replaceWith(newFileInput);     
        $el.querySelector('#file').onchange = onChoosePhotos;
      }

      const registerCloseButtons = () => {
        $el.querySelectorAll('.close')
          .forEach(button => {
            $(button).click(()=> {
              modal.hide();
            });
          });      
      }

      const fetchImages = async (directory) => {
        let response = await fetch(`/system/photo_gallery/${directory}/fetch` , {
          credentials: "same-origin",
          method: 'GET'
        });
        let data = await response.json();
        let {
          message,
          status, 
          images
        } = data;

        if(status == 'success') {
          if(!images || !images.length) {
            $el.querySelector('.modal-body .images-container').innerHTML = `
              <p class="text-center text-gray-500">
                Folder is empty.
              </p>          
            `;
          } else {
            $el.querySelector('.modal-body .images-container').innerHTML = ``;
            images.forEach(image => {
              addImageToModal(image);
            })
          }
        } else {
          console.log(message);
        }
      }

      const options = {
        placement: 'center',
        backdropClasses: 'bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-40',
        onHide: () => {
          $el.removeAttribute('data-directory');
          $el.querySelector('.modal-header h3').innerHTML = "Loading...";
          $el.querySelector('.modal-body .images-container').innerHTML = `
            <p class="text-center text-gray-500">
              Loading Photos...
            </p>          
          `;
          hideUploadPhotosButton();
        },
        onShow: () => {
          $el.setAttribute('data-directory', directory);
          $el.querySelector('.modal-header h3').innerHTML = directory;

          resetFileInput();
          registerCloseButtons();
          fetchImages(directory);
        },
        onToggle: () => {
            console.log('modal has been toggled');
        }
      };     
      const modal = new Modal($el, options); 

      modal.toggle();
    }

    PhotoGalleryForm.onsubmit = async (e) => {
      e.preventDefault();

      let oldNameInput  = PhotoGalleryForm.querySelector('#old_name');
      let directoryInput = PhotoGalleryForm.querySelector('#name');
      let processingModal = Swal.fire({ 
        imageUrl: '/assets/img/loading.gif',
        title: 'Processing...',
        allowOutsideClick: false, 
        allowEscapeKey: false,          
        showConfirmButton: false
      });

      let response = await fetch('/system/photo_gallery' + ((oldNameInput) ? ('/' + oldNameInput.value + '/update') : ''), {
        credentials: "same-origin",
        method: 'POST',
        body: new FormData(PhotoGalleryForm)
      });
      let {
        message,
        status
      } = await response.json();

      processingModal.close();
      if (status == 'success') {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: message,
          showConfirmButton: false,
          timer: 1500
        }).then(() => window.location.reload());
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: message
        });
      }
    }

    function editDirectory(data) {
      let { name } = data;
      let oldNameInput = PhotoGalleryForm.querySelector('#old_name');
      let nameInput = PhotoGalleryForm.querySelector('#name');

      if(oldNameInput) {
        oldNameInput.value = name;
      } else {
        let oldNameInput = document.createElement('input');

        oldNameInput.setAttribute('type', 'hidden');
        oldNameInput.setAttribute('id', 'old_name');
        oldNameInput.setAttribute('name', 'old_name');
        oldNameInput.value = name;
        PhotoGalleryForm.prepend(oldNameInput);
      }

      PhotoGalleryForm.querySelector('#name').value = name;

      PhotoGalleryForm.querySelector('#save-button').style.display = "none";
      PhotoGalleryForm.querySelector('#update-buttons').style.display = "inline-block";
    }

    function cancelEdit() {
      let oldNameInput = PhotoGalleryForm.querySelector('#old_name');
        oldNameInput.remove();
      
      PhotoGalleryForm.querySelector('#name').value = "";

      PhotoGalleryForm.querySelector('#save-button').style.display = "inline-block";
      PhotoGalleryForm.querySelector('#update-buttons').style.display = "none";
    }

    async function deleteDirectory(directory) {
      let result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      });

      if(result.isConfirmed) {
        let response = await fetch('/system/photo_gallery/' + directory, {
          credentials: "same-origin",
          method: 'DELETE',
        });
        let {
          message,
          status
        } = await response.json();

        if (status == 'success') {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            showConfirmButton: false,
            timer: 1500
          }).then(() => window.location.reload()); 
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: message
          });
        }
      }
    }
  </script>
{% endblock scripts %}