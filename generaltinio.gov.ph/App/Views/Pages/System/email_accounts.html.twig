{% extends '@pages/System/base.html.twig' %}

{% block title %}SYSTEM_MODULE: {{ current_page|title }} - General Tinio, Nueva Ecija | The Official Website{% endblock title %}
{% block right_content %}
  <div class="flex flex-col p-10">
    <h1 class="text-center text-4xl">Module: Email Accounts</h1>
    <hr class="my-5">
    {{ include('@components/System/email_accounts-table.html.twig', { 'email_accounts' : email_accounts }) }}
    <hr class="my-5">
    {{ include('@components/System/email_accounts-form.html.twig') }}
  </div>
{% endblock right_content %}
{% block scripts %}
  {{ parent() }}
  <script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
  <script>
    var simpleMDE = new SimpleMDE({ 
      element: document.getElementById("content"), 
      forceSync: true,
      spellChecker: false,
    });

    document.addEventListener('DOMContentLoaded', function () {
      try {
        let table = new DataTable('#email_accounts-table', {
          "columnDefs": [
            { "width": "5%", "targets": 0 },
            { "width": "20%", "targets": 1 },
            { "width": "10%", "targets": 3 },
          ]
        });
      } catch(e) {}
    });

    EmailAccountsForm.onsubmit = async (e) => {
      e.preventDefault();

      let processingModal = Swal.fire({ 
        imageUrl: '/assets/img/loading.gif',
        title: 'Processing...',
        allowOutsideClick: false, 
        allowEscapeKey: false,          
        showConfirmButton: false
      });

      let hiddenIdInput = EmailAccountsForm.querySelector('#id');
      let response = await fetch('/system/email_accounts' + ((hiddenIdInput) ? ('/' + hiddenIdInput.value + '/update') : ''), {
        credentials: "same-origin",
        method: 'POST',
        body: new FormData(EmailAccountsForm)
      });
      let {
        message,
        status
      } = await response.json();

      processingModal.close();
      if (status == 'success') {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: message,
          showConfirmButton: false,
          timer: 1500
        }).then(() => window.location.reload());
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: message
        });
      }
    }

    function editEmailAccount(data) {
      let { id, account, name } = data;
      let hiddenIdInput = EmailAccountsForm.querySelector('#id');

      if(hiddenIdInput) {
        hiddenIdInput.value = id;
      } else {
        let idInput = document.createElement('input');

        idInput.setAttribute('type', 'hidden');
        idInput.setAttribute('id', 'id');
        idInput.setAttribute('name', 'id');
        idInput.value = id;
        EmailAccountsForm.prepend(idInput);
      }

      EmailAccountsForm.querySelector('#account').value = account.replace('@generaltinio.gov.ph', '');
      EmailAccountsForm.querySelector('#name').value = name;

      EmailAccountsForm.querySelector('#save-button').style.display = "none";
      EmailAccountsForm.querySelector('#update-buttons').style.display = "inline-block";
    }

    function cancelEdit() {
      let hiddenIdInput = EmailAccountsForm.querySelector('#id');
        hiddenIdInput.remove();
      
      EmailAccountsForm.querySelector('#account').value = "";
      EmailAccountsForm.querySelector('#name').value = "";
      EmailAccountsForm.querySelector('#save-button').style.display = "inline-block";
      EmailAccountsForm.querySelector('#update-buttons').style.display = "none";
    }

    async function deleteEmailAccount(id) {
      let result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      });

      if(result.isConfirmed) {
        let response = await fetch('/system/email_accounts/' + id, {
          credentials: "same-origin",
          method: 'DELETE',
        });
        let {
          message,
          status
        } = await response.json();

        if (status == 'success') {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            showConfirmButton: false,
            timer: 1500
          }).then(() => window.location.reload()); 
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: message
          });
        }
      }
    }
  </script>
{% endblock scripts %}